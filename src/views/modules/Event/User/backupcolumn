  const columns = [
    {
      dataField: "id",
      text: "#",
      formatter: (cell, row, rowIndex) => rowIndex + 1,
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    {
      dataField: "name",
      text: "Name",
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    {
      dataField: "contact",
      text: "Contact",
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    {
      dataField: "email",
      text: "Email",
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    {
      dataField: "authentication",
      text: "Auth",
      formatter: (cell) => (parseInt(cell) === 1 ? "Password" : "OTP"),
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    {
      dataField: "role_name",
      text: "Role",
      formatter: (cell) => {
        const badgeClass =
          {
            Admin: "bg-info",
            Organizer: "bg-primary",
            User: "bg-warning",
            Agent: "bg-danger",
            "Support Executive": "bg-success",
          }[cell] || "bg-secondary";
        return (
          <span className={`badge p-2 fw-normal ls-1 ${badgeClass} w-100`}>
            {cell}
          </span>
        );
      },
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    ...(type === "company" ? [
      {
        dataField: "zoneData",
        text: "Zones",
        formatter: (cell, row) => {
          // If role is not User, show a custom text
          if (row.role_name !== "Company") {
            return <span className="text-muted">No action needed</span>;
          }
          setAssignedZoneIds(cell);
          const assignedZoneIds = (cell || []).map((z) => z.id);

          // Sort: assigned zones first, then unassigned
          const sortedZones = [...zones].sort((a, b) => {
            const aAssigned = assignedZoneIds.includes(a.id);
            const bAssigned = assignedZoneIds.includes(b.id);
            return aAssigned === bAssigned ? 0 : aAssigned ? -1 : 1;
          });

          // Limit to first 5 zones to display
          const displayZones = sortedZones.slice(0, 4);

          const remainingZones = zones.length > 5 ? zones.length - 5 : 0;

          return (
            <div className="d-flex gap-1 justify-content-center">
              {/* Display the first 5 zones (or fewer if less exist) */}
              {displayZones.map((zone, index) => {
                const isAssigned =
                  Array.isArray(assignedZoneIds) &&
                  assignedZoneIds.includes(zone.id);
                return (
                  <CustomTooltip key={index} text={zone.title || zone.name}>
                    <Button
                      size="sm"
                      variant={isAssigned ? "success" : "danger"}
                      className="rounded-3 border shadow-sm px-2 py-1"
                      style={{
                        minWidth: "32px",
                        height: "26px",
                      }}
                      disabled
                    >
                      {isAssigned ? (
                        <CheckCircle size={14} className="mx-auto" />
                      ) : (
                        <XCircle size={14} className="mx-auto" opacity={0.6} />
                      )}
                    </Button>
                  </CustomTooltip>
                );
              })}

              {/* If there are more zones than we can display, show a +n button */}
              {remainingZones > 0 && (
                <CustomTooltip
                  text={`${remainingZones} more zone${remainingZones > 1 ? "s" : ""
                    }`}
                >
                  <Button
                    size="sm"
                    variant="primary"
                    className="rounded-3 border shadow-sm px-2 py-1"
                    style={{
                      minWidth: "32px",
                      height: "26px",
                      fontSize: "0.7rem",
                    }}
                    onClick={() =>
                      setZoneModal({
                        show: true,
                        user: row,
                        assignedZoneIds: (cell || []).map((z) => z.id),
                      })
                    }
                  >
                    +{remainingZones}
                  </Button>
                </CustomTooltip>
              )}

              {/* If no zones exist at all */}
              {zones.length === 0 && (
                <span className="text-muted small">No zones available</span>
              )}
            </div>
          );
        },
        headerAlign: "center",
        align: "center",
        sort: true,
      },
      {
        dataField: "organiser_name",
        text: "Organizer",
        headerAlign: "center",
        align: "center",
        sort: true,
        formatter: (cell, row) => {
          return cell || row.organiser_company_name || row.user_org_name || "—";
        },
      },
    ] : []),
    ...((type === "organizer" || type === "company") ? [
      {
        dataField: "company_name",
        text: "Company Name",
        headerAlign: "center",
        align: "center",
        sort: true,
        formatter: (cell, row) => {
          return (
            cell || row.organiser_company_name || row.user_company_name || "—"
          );
        },
      },
    ] : []),
    ...(type === "user" ? [
      {
        dataField: "approval_status",
        text: "Status",
        formatter: (cell, row) => {
          if (row.role_name !== "User") {
            return (
              <CustomTooltip text="Approved">
                <Button
                  variant="outline-success"
                  className="btn-sm btn-icon"
                  disabled
                >
                  <CheckCircle size={16} />
                </Button>
              </CustomTooltip>
            );
          }
          let badgeClass = "";
          let statusText = "";
          let statusIcon = null;

          if (cell === 0) {
            badgeClass = "warning";
            statusText = "Pending";
            statusIcon = <Clock size={16} />;
          } else if (cell === 1) {
            badgeClass = "success";
            statusText = "Approved";
            statusIcon = <CheckCircle size={16} />;
          } else {
            badgeClass = "danger";
            statusText = "Rejected";
            statusIcon = <XCircle size={16} />;
          }

          return (
            <CustomTooltip text={statusText}>
              <Button
                variant={`outline-${badgeClass}`}
                className="btn-sm btn-icon"
                disabled
              >
                {statusIcon}
              </Button>
            </CustomTooltip>
          );
        },
        headerAlign: "center",
        align: "center",
        sort: true,
      },
      {
        dataField: "approval",
        text: "Approval Actions",
        formatter: (cell, row) => {
          // Only show approval buttons for pending users
          if (row.approval_status === 0) {
            if (row.role_name === "User" && row.approval_status === 0) {
              return (
                <div className="d-flex gap-2 justify-content-center">
                  <CustomTooltip text="Approve User">
                    <Button
                      variant={`outline-success`}
                      className="btn-sm btn-icon"
                      onClick={() => handleApproval(row.id, "1")}
                    >
                      <CheckCircle size={16} />
                    </Button>
                  </CustomTooltip>
                  <CustomTooltip text="Reject User">
                    <Button
                      variant={`outline-danger`}
                      className="btn-sm btn-icon"
                      onClick={() => handleApproval(row.id, "2")}
                    >
                      <XCircle size={16} />
                    </Button>
                  </CustomTooltip>
                </div>
              );
            }
          }
          return <span className="text-muted">No action needed</span>;
        },
        headerAlign: "center",
        align: "center",
      }
    ] : []),
    {
      dataField: "created_at",
      text: "Created At",
      formatter: (cell) => formatDateTime(cell),
      headerAlign: "center",
      align: "center",
      sort: true,
    },
    {
      dataField: "action",
      text: "Action",
      formatter: (cell, row) => {
        const actions = [
          {
            tooltip: "Generate ID Card",
            onClick: () => handleShowIdCardModal(row.id),
            icon: <IdCard size={16} />,
            variant: "secondary",
            isDisabled: row?.status !== 1 || row.approval_status !== 1,
            visible: type === "user"
          },
          {
            tooltip: "Preview User",
            onClick: () => handlePreview(row.id),
            icon: <Eye size={16} />,
            variant: "info",
            visible: true
          },
          {
            tooltip: "Users",
            onClick: () => handlePreview(row.id),
            icon: <Users2 size={16} />,
            variant: "warning",
            visible: type === "company" || type === "organizer"
          },
          {
            tooltip: "Manage User",
            onClick: () => AssignCredit(row.id),
            icon: <Settings size={16} />,
            variant: "primary",
            visible: true
          },
          {
            tooltip: "Delete User",
            onClick: () => HandleDelete(row.id),
            icon: <Trash2 size={16} />,
            variant: "danger",
            visible: true,
          },
        ];

        return (
          <div className="d-flex gap-2 justify-content-center">
            {actions.map((action, index) => (
              action.visible &&
              <CustomTooltip key={index} text={action.tooltip}>
                <Button
                  variant={action.variant}
                  className="btn-sm btn-icon"
                  onClick={action.onClick}
                  disabled={action?.isDisabled}
                >
                  {action.icon}
                </Button>
              </CustomTooltip>
            ))}
          </div>
        );
      },
      headerAlign: "center",
      align: "center",
    },
  ];